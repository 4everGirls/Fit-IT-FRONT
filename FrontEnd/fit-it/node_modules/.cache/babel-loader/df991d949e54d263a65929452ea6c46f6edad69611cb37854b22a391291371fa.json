{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport axios from 'axios';\nimport router from \"@/router\";\nimport createPersistedState from \"vuex-persistedstate\";\nimport _ from \"lodash\";\nVue.use(Vuex);\nconst REST_API = `http://localhost:9999`;\nexport default new Vuex.Store({\n  plugins: [createPersistedState()],\n  state: {\n    token: \"\",\n    loginUser: {},\n    user: {},\n    videos: [],\n    video: null,\n    missionList: [],\n    challengeList: []\n  },\n  getters: {},\n  mutations: {\n    LOGIN_USER(state, {\n      loginUser,\n      token\n    }) {\n      state.loginUser = loginUser;\n      state.token = token;\n    },\n    LOGOUT(state) {\n      state.loginUser = {};\n      state.token = \"\";\n    },\n    SEARCH_VIDEO(state, videos) {\n      state.videos = videos;\n    },\n    ADD_VIDEO(state, video) {\n      let current = state.missionList;\n      let newList = [...current];\n      newList.push(video);\n      state.missionList = newList;\n    }\n  },\n  actions: {\n    loginUser({\n      commit\n    }, user) {\n      console.log(user);\n      const API_URL = `${REST_API}/userApi/login`;\n      axios({\n        url: API_URL,\n        method: \"POST\",\n        params: user\n      }).then(res => {\n        console.log(res.data.message);\n        if (res.data.message === \"success\") {\n          let token = res.data[\"access-token\"];\n          let loginUser = res.data[\"user\"];\n          console.log(token);\n          console.log(loginUser);\n          commit(\"LOGIN_USER\", {\n            loginUser,\n            token\n          });\n          sessionStorage.setItem(\"access-token\", token);\n          // sessionStorage.setItem(\"login-user\", loginUser);\n          router.push({\n            name: \"home\"\n          });\n        } else {\n          alert(\"로그인에 실패하였습니다.\");\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    logout({\n      commit\n    }) {\n      sessionStorage.removeItem(\"access-token\");\n      commit(\"LOGOUT\");\n      router.push({\n        name: \"home\"\n      });\n    },\n    createUser({\n      commit\n    }, user) {\n      console.log(user);\n      const API_URL = `${REST_API}/userApi/signup`;\n      axios({\n        url: API_URL,\n        method: \"POST\",\n        data: user\n      }).then(() => {\n        console.log(user);\n        commit;\n        alert(\"회원 가입이 완료 되었습니다.\");\n        router.push(\"/login\");\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    searchVideo({\n      commit\n    }, keyword) {\n      const YOUTUBE_KEY = process.env.VUE_APP_YOUTUBE_API_KEY;\n      const API_URL = `https://www.googleapis.com/youtube/v3/search`;\n      console.log(keyword);\n      axios({\n        url: API_URL,\n        method: \"GET\",\n        params: {\n          key: YOUTUBE_KEY,\n          part: 'snippet',\n          q: keyword,\n          type: 'video',\n          maxResults: 6\n        }\n      }).then(res => {\n        console.log(res.data.items);\n        let items = res.data.items;\n        let newItems = items.map(item => {\n          item.snippet.title = _.unescape(item.snippet.title);\n          return item;\n        });\n        console.log(newItems);\n        commit(\"SEARCH_VIDEO\", newItems);\n      }).catch(err => console.log(err));\n    },\n    checkId({\n      commit\n    }, id) {\n      commit;\n      const API_URL = `${REST_API}/userApi/idCheck/${id}`;\n      axios({\n        url: API_URL,\n        method: \"GET\"\n      }).then(res => {\n        if (res.data === \"success\") {\n          alert(\"사용 가능한 아이디입니다.\");\n        } else {\n          alert(\"이미 사용 중인 아이디입니다.\");\n        }\n      });\n    },\n    checkNickname({\n      commit\n    }, nickname) {\n      commit;\n      const API_URL = `${REST_API}/userApi/nicknameCheck/${nickname}`;\n      axios({\n        url: API_URL,\n        method: \"GET\"\n      }).then(res => {\n        if (res.data === \"success\") {\n          alert(\"사용 가능한 닉네임입니다.\");\n        } else {\n          alert(\"이미 사용 중인 닉네임입니다\");\n        }\n      });\n    },\n    getVideoList({\n      commit\n    }, video) {\n      console.log(video);\n      commit(\"ADD_VIDEO\", video);\n    },\n    makeC\n  },\n  modules: {}\n});","map":{"version":3,"names":["Vue","Vuex","axios","router","createPersistedState","_","use","REST_API","Store","plugins","state","token","loginUser","user","videos","video","missionList","challengeList","getters","mutations","LOGIN_USER","LOGOUT","SEARCH_VIDEO","ADD_VIDEO","current","newList","push","actions","commit","console","log","API_URL","url","method","params","then","res","data","message","sessionStorage","setItem","name","alert","catch","err","logout","removeItem","createUser","searchVideo","keyword","YOUTUBE_KEY","process","env","VUE_APP_YOUTUBE_API_KEY","key","part","q","type","maxResults","items","newItems","map","item","snippet","title","unescape","checkId","id","checkNickname","nickname","getVideoList","makeC","modules"],"sources":["C:/Users/multicampus/Desktop/Fit-IT-/FrontEnd/fit-it/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\nimport axios from 'axios';\r\nimport router from \"@/router\";\r\nimport createPersistedState from \"vuex-persistedstate\";\r\nimport _ from \"lodash\";\r\n\r\nVue.use(Vuex)\r\n\r\nconst REST_API = `http://localhost:9999`;\r\n\r\nexport default new Vuex.Store({\r\n  plugins: [createPersistedState()],\r\n  state: {\r\n    token: \"\",\r\n    loginUser: {},\r\n    user:{},\r\n    videos: [],\r\n    video: null,\r\n    missionList: [],\r\n    challengeList: [],\r\n  },\r\n  getters: {\r\n  },\r\n  mutations: {\r\n    LOGIN_USER(state, {loginUser, token}) {\r\n      state.loginUser = loginUser;\r\n      state.token = token;\r\n    },\r\n    LOGOUT(state) {\r\n      state.loginUser = {};\r\n      state.token = \"\";\r\n    },\r\n    SEARCH_VIDEO(state, videos) {\r\n      state.videos = videos\r\n    },\r\n    ADD_VIDEO(state, video){\r\n      let current = state.missionList;\r\n      let newList = [...current];\r\n      newList.push(video);\r\n      state.missionList = newList;\r\n    }\r\n  },\r\n  actions: {\r\n    loginUser({ commit }, user) {\r\n      console.log(user);\r\n      const API_URL = `${REST_API}/userApi/login`;\r\n      axios({\r\n        url: API_URL,\r\n        method: \"POST\",\r\n        params: user,\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data.message);\r\n        if (res.data.message === \"success\") {\r\n          \r\n          let token = res.data[\"access-token\"];\r\n          let loginUser = res.data[\"user\"];\r\n          console.log(token);\r\n          console.log(loginUser);\r\n          commit(\"LOGIN_USER\", { loginUser, token });\r\n          sessionStorage.setItem(\"access-token\", token);\r\n          // sessionStorage.setItem(\"login-user\", loginUser);\r\n          router.push({ name: \"home\" });\r\n        } else {\r\n          alert(\"로그인에 실패하였습니다.\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    },\r\n    logout({ commit }) {\r\n      sessionStorage.removeItem(\"access-token\");\r\n      commit(\"LOGOUT\");\r\n      router.push({ name: \"home\" });\r\n    },\r\n    createUser({ commit }, user) {\r\n      console.log(user);\r\n      const API_URL = `${REST_API}/userApi/signup`;\r\n      \r\n      axios({\r\n        url: API_URL,\r\n        method: \"POST\",\r\n        data: user,\r\n      })\r\n      .then(() => {\r\n        console.log(user);\r\n        commit;\r\n        \r\n        alert(\"회원 가입이 완료 되었습니다.\");\r\n        router.push(\"/login\");\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n    },\r\n    searchVideo({commit}, keyword) {\r\n      const YOUTUBE_KEY = process.env.VUE_APP_YOUTUBE_API_KEY;\r\n      const API_URL = `https://www.googleapis.com/youtube/v3/search`;\r\n      \r\n      console.log(keyword);\r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n        params: {\r\n          key: YOUTUBE_KEY,\r\n          part: 'snippet',\r\n          q: keyword,\r\n          type: 'video',\r\n          maxResults: 6,\r\n        }\r\n      })\r\n        .then((res) => {\r\n          console.log(res.data.items);\r\n          let items = res.data.items;\r\n          let newItems = items.map((item) => {\r\n            item.snippet.title = _.unescape(item.snippet.title);\r\n            return item;\r\n          })\r\n          console.log(newItems);\r\n          commit(\"SEARCH_VIDEO\", newItems);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    checkId({commit},id) {\r\n      commit\r\n      const API_URL = `${REST_API}/userApi/idCheck/${id}`;\r\n      \r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n      })\r\n        .then((res) => {\r\n          if(res.data === \"success\") {\r\n            alert(\"사용 가능한 아이디입니다.\");\r\n          } else {\r\n            alert(\"이미 사용 중인 아이디입니다.\")\r\n          }\r\n        })\r\n    },\r\n    checkNickname({commit},nickname) {\r\n      commit\r\n      const API_URL = `${REST_API}/userApi/nicknameCheck/${nickname}`;\r\n      \r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n      })\r\n        .then((res) => {\r\n          if(res.data === \"success\") {\r\n            alert(\"사용 가능한 닉네임입니다.\");\r\n          } else {\r\n            alert(\"이미 사용 중인 닉네임입니다\")\r\n          }\r\n        })\r\n    },\r\n    getVideoList({commit}, video) {\r\n      console.log(video)\r\n      commit(\"ADD_VIDEO\",video);\r\n    },\r\n    makeC\r\n  },\r\n  modules: {\r\n  }\r\n})\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}