{"ast":null,"code":"import { validationMixin } from \"vuelidate\";\nimport { required, minLength } from \"vuelidate/lib/validators\";\nexport default {\n  mixins: [validationMixin],\n  data() {\n    return {\n      foods: [{\n        value: null,\n        text: \"Choose...\"\n      }, {\n        value: \"apple\",\n        text: \"Apple\"\n      }, {\n        value: \"orange\",\n        text: \"Orange\"\n      }],\n      form: {\n        name: null,\n        food: null\n      }\n    };\n  },\n  validations: {\n    form: {\n      food: {\n        required\n      },\n      name: {\n        required,\n        minLength: minLength(3)\n      }\n    }\n  },\n  methods: {\n    validateState(name) {\n      const {\n        $dirty,\n        $error\n      } = this.$v.form[name];\n      return $dirty ? !$error : null;\n    },\n    resetForm() {\n      this.form = {\n        name: null,\n        food: null\n      };\n      this.$nextTick(() => {\n        this.$v.$reset();\n      });\n    },\n    onSubmit() {\n      this.$v.form.$touch();\n      if (this.$v.form.$anyError) {\n        return;\n      }\n      alert(\"Form submitted!\");\n    }\n  }\n};","map":{"version":3,"mappings":"AA2CA;AACA;AAEA;EACAA;EACAC;IACA;MACAC,QACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,EACA;MACAC;QACAC;QACAC;MACA;IACA;EACA;EACAC;IACAH;MACAE;QACAE;MACA;MACAH;QACAG;QACAC;MACA;IACA;EACA;EACAC;IACAC;MACA;QAAAC;QAAAC;MAAA;MACA;IACA;IACAC;MACA;QACAT;QACAC;MACA;MAEA;QACA;MACA;IACA;IACAS;MACA;MACA;QACA;MACA;MAEAC;IACA;EACA;AACA","names":["mixins","data","foods","value","text","form","name","food","validations","required","minLength","methods","validateState","$dirty","$error","resetForm","onSubmit","alert"],"sourceRoot":"src/components/user","sources":["RegistUsercopy.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <b-form @submit.stop.prevent=\"onSubmit\">\r\n      <b-form-group id=\"example-input-group-1\" label=\"Name\" label-for=\"example-input-1\">\r\n        <b-form-input\r\n          id=\"example-input-1\"\r\n          name=\"example-input-1\"\r\n          v-model=\"$v.form.name.$model\"\r\n          :state=\"validateState('name')\"\r\n          aria-describedby=\"input-1-live-feedback\"\r\n        ></b-form-input>\r\n\r\n        <b-form-invalid-feedback\r\n          id=\"input-1-live-feedback\"\r\n        >This is a required field and must be at least 3 characters.</b-form-invalid-feedback>\r\n      </b-form-group>\r\n\r\n      <b-form-group id=\"example-input-group-2\" label=\"Food\" label-for=\"example-input-2\">\r\n        <b-form-select\r\n          id=\"example-input-2\"\r\n          name=\"example-input-2\"\r\n          v-model=\"$v.form.food.$model\"\r\n          :options=\"foods\"\r\n          :state=\"validateState('food')\"\r\n          aria-describedby=\"input-2-live-feedback\"\r\n        ></b-form-select>\r\n\r\n        <b-form-invalid-feedback id=\"input-2-live-feedback\">This is a required field.</b-form-invalid-feedback>\r\n      </b-form-group>\r\n\r\n      <b-button type=\"submit\" variant=\"primary\">Submit</b-button>\r\n      <b-button class=\"ml-2\" @click=\"resetForm()\">Reset</b-button>\r\n    </b-form>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\nbody {\r\n  padding: 1rem;\r\n}\r\n</style>\r\n\r\n<script>\r\nimport { validationMixin } from \"vuelidate\";\r\nimport { required, minLength } from \"vuelidate/lib/validators\";\r\n\r\nexport default {\r\n  mixins: [validationMixin],\r\n  data() {\r\n    return {\r\n      foods: [\r\n        { value: null, text: \"Choose...\" },\r\n        { value: \"apple\", text: \"Apple\" },\r\n        { value: \"orange\", text: \"Orange\" }\r\n      ],\r\n      form: {\r\n        name: null,\r\n        food: null\r\n      }\r\n    };\r\n  },\r\n  validations: {\r\n    form: {\r\n      food: {\r\n        required\r\n      },\r\n      name: {\r\n        required,\r\n        minLength: minLength(3)\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    validateState(name) {\r\n      const { $dirty, $error } = this.$v.form[name];\r\n      return $dirty ? !$error : null;\r\n    },\r\n    resetForm() {\r\n      this.form = {\r\n        name: null,\r\n        food: null\r\n      };\r\n\r\n      this.$nextTick(() => {\r\n        this.$v.$reset();\r\n      });\r\n    },\r\n    onSubmit() {\r\n      this.$v.form.$touch();\r\n      if (this.$v.form.$anyError) {\r\n        return;\r\n      }\r\n\r\n      alert(\"Form submitted!\");\r\n    }\r\n  }\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}