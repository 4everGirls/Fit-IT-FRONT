{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport axios from \"axios\";\nimport router from \"@/router\";\nimport createPersistedState from \"vuex-persistedstate\";\nimport _ from \"lodash\";\nVue.use(Vuex);\nconst REST_API = `http://localhost:9999`;\nexport default new Vuex.Store({\n  plugins: [createPersistedState()],\n  // ****************************************************************************STATE\n  state: {\n    token: \"\",\n    // 로그인 시 필요한 토큰\n    loginUser: {},\n    // 로그인한 유저\n    user: {},\n    // 유저들\n    videos: [],\n    // 유튜브 api에서 가져와서 뿌려줄 비디오들\n    video: null,\n    // 하나의 유튜브 비디오\n    missions: [],\n    // 미션리스트(비디오집합)\n    // challengeList: [],  // 오픈된 챌린지의 리스트\n    challenge: {},\n    // 챌린지 하나\n    challenges: [],\n    // DB에서 가져온 챌린지 정보(GET) => (메인페이지 오픈된 챌린지 리스트)\n    mymakechallenges: [],\n    // 내가 만든 챌린지리스트 (마이페이지에 있는 내 챌린지임)\n    myjoinchallenges: [],\n    // 내가 등록한 챌린지(메인페이지에 있는 내 챌린지임)\n    joinParticipantInfo: {},\n    //챌린지 참여하기 버튼을 누를때 유저no와 챌린지 no 들어가는 부분\n    reviews: [],\n    // 챌린지에 달린 리뷰\n    indetailGetMissionList: [] //디테일 페이지에서 특정 챌린지의 미션리스트정보를 담는 배열\n\n    // challengeList에 추가 필요\n  },\n\n  // ****************************************************************************GETTERS\n  getters: {},\n  // ***************************************************************************MUTATIONS\n  mutations: {\n    LOGIN_USER(state, {\n      loginUser,\n      token\n    }) {\n      state.loginUser = loginUser;\n      state.token = token;\n    },\n    LOGOUT(state) {\n      state.loginUser = {};\n      state.token = \"\";\n    },\n    SEARCH_VIDEO(state, videos) {\n      state.videos = videos;\n    },\n    ADD_VIDEO(state, video) {\n      let current = state.missions;\n      let newList = [...current];\n      newList.push(video);\n      state.missions = newList;\n    },\n    MAKE_CHALLENGE(state, challenge) {\n      let newChallenge = {\n        ...challenge\n      };\n      newChallenge[\"token\"] = state.token;\n      newChallenge[\"reviews\"] = state.reviews; // 챌린지별 리뷰가 들어가나???? 확인 필요\n      state.challenges.push(newChallenge);\n    },\n    DELETE_MISSION(state, index) {\n      state.missions.splice(index, 1);\n    },\n    GET_CHALLENGES(state, challenges) {\n      state.challenges = challenges;\n    },\n    GET_DETAIL_CHALLENGE(state, challenge) {\n      state.challenge = challenge;\n    },\n    GET_MY_MAKE_CHALLENGE(state, mymakechallenges) {\n      state.mymakechallenges = mymakechallenges;\n    },\n    IN_DETAIL_GET_MISSIONLIST(state, indetailGetMissionList) {\n      state.indetailGetMissionList = indetailGetMissionList;\n    },\n    GET_VIDEO(state, missionVideo) {\n      state.video = missionVideo;\n    },\n    POST_JOIN_INFO\n\n    // setchallengeNo(state, cno) {\n    //   state.cno = cno;\n    // },\n  },\n\n  // ******************************************************************************ACTIONS\n  actions: {\n    loginUser({\n      commit\n    }, user) {\n      console.log(user);\n      const API_URL = `${REST_API}/userApi/login`;\n      axios({\n        url: API_URL,\n        method: \"POST\",\n        params: user\n      }).then(res => {\n        console.log(res.data.message);\n        if (res.data.message === \"success\") {\n          let token = res.data[\"access-token\"];\n          let loginUser = res.data[\"user\"];\n          console.log(token);\n          console.log(loginUser);\n          commit(\"LOGIN_USER\", {\n            loginUser,\n            token\n          });\n          sessionStorage.setItem(\"access-token\", token);\n          router.push({\n            name: \"home\"\n          });\n        } else {\n          alert(\"로그인에 실패하였습니다.\");\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    logout({\n      commit\n    }) {\n      sessionStorage.removeItem(\"access-token\");\n      commit(\"LOGOUT\");\n      router.push({\n        name: \"home\"\n      });\n    },\n    createUser({\n      commit\n    }, user) {\n      console.log(user);\n      const API_URL = `${REST_API}/userApi/signup`;\n      axios({\n        url: API_URL,\n        method: \"POST\",\n        data: user\n      }).then(() => {\n        console.log(user);\n        commit;\n        alert(\"회원 가입이 완료 되었습니다.\");\n        router.push(\"/login\");\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    searchVideo({\n      commit\n    }, keyword) {\n      const YOUTUBE_KEY = process.env.VUE_APP_YOUTUBE_API_KEY;\n      const API_URL = `https://www.googleapis.com/youtube/v3/search`;\n      console.log(keyword);\n      axios({\n        url: API_URL,\n        method: \"GET\",\n        params: {\n          key: YOUTUBE_KEY,\n          part: \"snippet\",\n          q: keyword,\n          type: \"video\",\n          maxResults: 6\n        }\n      }).then(res => {\n        console.log(res.data.items);\n        let items = res.data.items;\n        let newItems = items.map(item => {\n          item.snippet.title = _.unescape(item.snippet.title);\n          return item;\n        });\n        console.log(newItems);\n        commit(\"SEARCH_VIDEO\", newItems);\n      }).catch(err => console.log(err));\n    },\n    checkId({\n      commit\n    }, id) {\n      commit;\n      const API_URL = `${REST_API}/userApi/idCheck/${id}`;\n      axios({\n        url: API_URL,\n        method: \"GET\"\n      }).then(res => {\n        if (res.data === \"success\") {\n          alert(\"사용 가능한 아이디입니다.\");\n        } else {\n          alert(\"이미 사용 중인 아이디입니다.\");\n        }\n      });\n    },\n    checkNickname({\n      commit\n    }, nickname) {\n      commit;\n      const API_URL = `${REST_API}/userApi/nicknameCheck/${nickname}`;\n      axios({\n        url: API_URL,\n        method: \"GET\"\n      }).then(res => {\n        if (res.data === \"success\") {\n          alert(\"사용 가능한 닉네임입니다.\");\n        } else {\n          alert(\"이미 사용 중인 닉네임입니다\");\n        }\n      });\n    },\n    getVideoList({\n      commit\n    }, video) {\n      console.log(video);\n      commit(\"ADD_VIDEO\", video);\n    },\n    // makeChallenge({ state, commit }, challenge) {\n    //   // 비동기 작업을 수행\n    //   const API_URL = `${REST_API}/challengeApi/insertChallenge`;\n\n    //   axios({\n    //     url: API_URL,\n    //     method: \"POST\",\n    //     data: challenge,\n    //   })\n    //     .then((res) => {\n    //       console.log(res.data);\n\n    //       commit(\"setchallengeNo\", res.data);\n    //     })\n    //     .then(() => {\n    //       console.log(state.cno);\n    //       const API_URL2 = `${REST_API}/challengeApi/insertMission/${state.cno}}`;\n    //       console.log(API_URL2);\n    //       axios({\n    //         url: API_URL2,\n    //         method: \"POST\",\n    //         data: challenge.missions,\n    //       }).then(() => {\n    //         // console.log(challenge);\n    //         alert(\"챌린지 등록이 완료되었습니다.\");\n    //         router.push(\"/detailChallenge\"); //나중에 ${challengeNO}로 보내기\n    //       });\n    //     })\n    //     .catch((err) => {\n    //       console.log(err);\n    //     });\n    //   commit(\"MAKE_CHALLENGE\", challenge);\n    //   console.log(challenge);\n    // },\n    makeChallengePromise({\n      commit\n    }, challenge) {\n      return new Promise((response, reject) => {\n        // 비동기 작업 수행\n        const API_URL = `${REST_API}/challengeApi/insertChallenge`;\n        axios({\n          url: API_URL,\n          method: \"POST\",\n          data: challenge\n        }).then(res => {\n          console.log(res.data);\n          commit(\"setchallengeNo\", res.data);\n          response(res.data);\n        }).catch(err => {\n          console.log(err);\n          reject(err);\n        });\n      });\n    },\n    makeMissionPromise({\n      commit\n    }, payload) {\n      commit;\n      return new Promise((response, reject) => {\n        // 비동기 작업 수행\n        const API_URL = `${REST_API}/challengeApi/insertMission/${payload.challengeNo}`;\n        let newMissions = payload.missions.map(mission => {\n          return {\n            videoTitle: mission.videoTitle,\n            challengeNo: payload.challengeNo,\n            videoId: mission.videoId,\n            videoThumbnail: mission.videoThumbnail.url,\n            channelName: mission.channelName\n          };\n        });\n        console.log(newMissions);\n        axios({\n          url: API_URL,\n          method: \"POST\",\n          data: newMissions\n        }).then(() => {\n          alert(\"챌린지 등록이 완료되었습니다.\");\n          router.push(\"/detailChallenge\"); //나중에 ${challengeNO}로 보내기\n        }).catch(err => {\n          console.log(err);\n          reject(err);\n        });\n      });\n    },\n    deleteVideo({\n      commit\n    }, index) {\n      commit(\"DELETE_MISSION\", index);\n    },\n    getChallenges({\n      commit\n    }) {\n      const API_URL = `${REST_API}/challengeApi/allChallenge`;\n      axios({\n        url: API_URL,\n        method: \"GET\"\n      }).then(res => {\n        let challenges = res.data;\n        commit(\"GET_CHALLENGES\", challenges);\n      });\n    },\n    getDetailChallenge({\n      commit\n    }, challengeNo) {\n      console.log(commit);\n      console.log(challengeNo);\n      const API_URL = `${REST_API}/challengeApi/detailChallenge/${challengeNo}`;\n      axios({\n        url: API_URL,\n        method: \"GET\"\n      }).then(res => {\n        let challenge = res.data;\n        commit(\"GET_DETAIL_CHALLENGE\", challenge);\n      }).catch(err => console.log(err));\n    },\n    goDetail({\n      commit\n    }) {\n      const API_URL = `${REST_API}/challengeApi/detailChallenge`;\n      commit;\n      console.log(API_URL);\n      // console.log(challengeNo);\n      // axios({\n      //   url: API_URL,\n      //   method: \"GET\",\n      //   data: challenge,\n      // })\n      //   .then((res) => {\n      //     commit(\"SET_DETAILS\", challenge);\n      //   }\n      //   .catch((err) => {\n      //   console.log(err);\n      // },\n    },\n\n    getMyChallenges({\n      commit\n    }, userNo) {\n      const API_URL = `${REST_API}/challengeApi/makeChallengeList/${userNo}`;\n      axios({\n        url: API_URL,\n        method: \"GET\"\n      }).then(res => {\n        let mymakechallenges = res.data;\n        commit(\"GET_MY_MAKE_CHALLENGE\", mymakechallenges);\n      }).catch(err => console.log(err));\n    },\n    deleteMyMakeChallenge({\n      state,\n      commit\n    }, challengeNo) {\n      console.log(state.loginUser.userNo);\n      console.log(challengeNo);\n      const API_URL = `${REST_API}/challengeApi/deleteChallenge/${challengeNo}`;\n      const API_URL2 = `${REST_API}/challengeApi/makeChallengeList/${state.loginUser.userNo}`;\n      axios({\n        url: API_URL,\n        method: \"DELETE\"\n      }).then(() => {\n        axios({\n          url: API_URL2,\n          method: \"GET\"\n        }).then(res => {\n          let mymakechallenges = res.data;\n          commit(\"GET_MY_MAKE_CHALLENGE\", mymakechallenges);\n        });\n      });\n    },\n    inDetailGetMissionList({\n      commit\n    }, challengeNo) {\n      const API_URL = `${REST_API}/challengeApi/detailMission/${challengeNo}`;\n      axios({\n        url: API_URL,\n        method: \"GET\"\n      }).then(res => {\n        let indetailGetMissionList = res.data;\n        console.log(indetailGetMissionList);\n        commit(\"IN_DETAIL_GET_MISSIONLIST\", indetailGetMissionList);\n      }).catch(err => console.log(err));\n    },\n    getMyJoinChallenges({\n      commit\n    }) {\n      const API_URL = `${REST_API}/challengeApi/myjoinChallenge`;\n      axios({\n        url: API_URL,\n        method: \"GET\"\n      }).then(res => {\n        let myjoinchallenges = res.data;\n        commit(\"GET_MY_JOIN_CHALLENGE\", myjoinchallenges);\n      }).catch(err => console.log(err));\n    },\n    // 나중에 다시 확인 필요***********\n    joinChallenge({\n      commit\n    }, joinInfo) {\n      const API_URL = `${REST_API}/challengeApi/joinChallenge`;\n      console.log(joinInfo);\n      commit(\"POST_JOIN_INFO\", joinInfo);\n      axios({\n        url: API_URL,\n        method: \"POST\",\n        data: joinInfo\n      }).then(() => {\n        //참여가 되면 그 상세 페이지에서 참여 버튼 바뀌게 해야함.......\n        alert(\"챌린지에 등록되었습니다.\");\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    getMissionVideo({\n      commit\n    }, missionNo) {\n      const API_URL = `${REST_API}/challengeApi/missionVideo/${missionNo}`;\n      axios({\n        url: API_URL,\n        method: \"GET\"\n      }).then(res => {\n        let missionVideo = res.data;\n        console.log(missionVideo);\n        commit(\"GET_VIDEO\", missionVideo);\n      });\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["Vue","Vuex","axios","router","createPersistedState","_","use","REST_API","Store","plugins","state","token","loginUser","user","videos","video","missions","challenge","challenges","mymakechallenges","myjoinchallenges","joinParticipantInfo","reviews","indetailGetMissionList","getters","mutations","LOGIN_USER","LOGOUT","SEARCH_VIDEO","ADD_VIDEO","current","newList","push","MAKE_CHALLENGE","newChallenge","DELETE_MISSION","index","splice","GET_CHALLENGES","GET_DETAIL_CHALLENGE","GET_MY_MAKE_CHALLENGE","IN_DETAIL_GET_MISSIONLIST","GET_VIDEO","missionVideo","POST_JOIN_INFO","actions","commit","console","log","API_URL","url","method","params","then","res","data","message","sessionStorage","setItem","name","alert","catch","err","logout","removeItem","createUser","searchVideo","keyword","YOUTUBE_KEY","process","env","VUE_APP_YOUTUBE_API_KEY","key","part","q","type","maxResults","items","newItems","map","item","snippet","title","unescape","checkId","id","checkNickname","nickname","getVideoList","makeChallengePromise","Promise","response","reject","makeMissionPromise","payload","challengeNo","newMissions","mission","videoTitle","videoId","videoThumbnail","channelName","deleteVideo","getChallenges","getDetailChallenge","goDetail","getMyChallenges","userNo","deleteMyMakeChallenge","API_URL2","inDetailGetMissionList","getMyJoinChallenges","joinChallenge","joinInfo","getMissionVideo","missionNo","modules"],"sources":["/Users/gimgyuyeon/Desktop/Fit-IT-FRONT/FrontEnd/fit-it/src/store/index.js"],"sourcesContent":["import Vue from \"vue\";\r\nimport Vuex from \"vuex\";\r\nimport axios from \"axios\";\r\nimport router from \"@/router\";\r\nimport createPersistedState from \"vuex-persistedstate\";\r\nimport _ from \"lodash\";\r\n\r\nVue.use(Vuex);\r\n\r\nconst REST_API = `http://localhost:9999`;\r\n\r\nexport default new Vuex.Store({\r\n  plugins: [createPersistedState()],\r\n  // ****************************************************************************STATE\r\n  state: {\r\n    token: \"\", // 로그인 시 필요한 토큰\r\n    loginUser: {}, // 로그인한 유저\r\n    user: {}, // 유저들\r\n    videos: [], // 유튜브 api에서 가져와서 뿌려줄 비디오들\r\n    video: null, // 하나의 유튜브 비디오\r\n    missions: [], // 미션리스트(비디오집합)\r\n    // challengeList: [],  // 오픈된 챌린지의 리스트\r\n    challenge: {}, // 챌린지 하나\r\n    challenges: [], // DB에서 가져온 챌린지 정보(GET) => (메인페이지 오픈된 챌린지 리스트)\r\n    mymakechallenges: [], // 내가 만든 챌린지리스트 (마이페이지에 있는 내 챌린지임)\r\n    myjoinchallenges: [], // 내가 등록한 챌린지(메인페이지에 있는 내 챌린지임)\r\n    joinParticipantInfo: {}, //챌린지 참여하기 버튼을 누를때 유저no와 챌린지 no 들어가는 부분\r\n    reviews: [], // 챌린지에 달린 리뷰\r\n    indetailGetMissionList: [], //디테일 페이지에서 특정 챌린지의 미션리스트정보를 담는 배열\r\n\r\n    // challengeList에 추가 필요\r\n  },\r\n\r\n  // ****************************************************************************GETTERS\r\n  getters: {},\r\n\r\n  // ***************************************************************************MUTATIONS\r\n  mutations: {\r\n    LOGIN_USER(state, { loginUser, token }) {\r\n      state.loginUser = loginUser;\r\n      state.token = token;\r\n    },\r\n    LOGOUT(state) {\r\n      state.loginUser = {};\r\n      state.token = \"\";\r\n    },\r\n    SEARCH_VIDEO(state, videos) {\r\n      state.videos = videos;\r\n    },\r\n    ADD_VIDEO(state, video) {\r\n      let current = state.missions;\r\n      let newList = [...current];\r\n      newList.push(video);\r\n      state.missions = newList;\r\n    },\r\n    MAKE_CHALLENGE(state, challenge) {\r\n      let newChallenge = { ...challenge };\r\n      newChallenge[\"token\"] = state.token;\r\n      newChallenge[\"reviews\"] = state.reviews; // 챌린지별 리뷰가 들어가나???? 확인 필요\r\n      state.challenges.push(newChallenge);\r\n    },\r\n    DELETE_MISSION(state, index) {\r\n      state.missions.splice(index, 1);\r\n    },\r\n    GET_CHALLENGES(state, challenges) {\r\n      state.challenges = challenges;\r\n    },\r\n    GET_DETAIL_CHALLENGE(state, challenge) {\r\n      state.challenge = challenge;\r\n    },\r\n    GET_MY_MAKE_CHALLENGE(state, mymakechallenges) {\r\n      state.mymakechallenges = mymakechallenges;\r\n    },\r\n    IN_DETAIL_GET_MISSIONLIST(state, indetailGetMissionList) {\r\n      state.indetailGetMissionList = indetailGetMissionList;\r\n    },\r\n    GET_VIDEO(state, missionVideo ) {\r\n      state.video = missionVideo;\r\n    },\r\n    POST_JOIN_INFO\r\n\r\n    // setchallengeNo(state, cno) {\r\n    //   state.cno = cno;\r\n    // },\r\n  },\r\n\r\n  // ******************************************************************************ACTIONS\r\n  actions: {\r\n    loginUser({ commit }, user) {\r\n      console.log(user);\r\n      const API_URL = `${REST_API}/userApi/login`;\r\n      axios({\r\n        url: API_URL,\r\n        method: \"POST\",\r\n        params: user,\r\n      })\r\n        .then((res) => {\r\n          console.log(res.data.message);\r\n          if (res.data.message === \"success\") {\r\n            let token = res.data[\"access-token\"];\r\n            let loginUser = res.data[\"user\"];\r\n            console.log(token);\r\n            console.log(loginUser);\r\n            commit(\"LOGIN_USER\", { loginUser, token });\r\n            sessionStorage.setItem(\"access-token\", token);\r\n            router.push({ name: \"home\" });\r\n          } else {\r\n            alert(\"로그인에 실패하였습니다.\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n\r\n    logout({ commit }) {\r\n      sessionStorage.removeItem(\"access-token\");\r\n      commit(\"LOGOUT\");\r\n      router.push({ name: \"home\" });\r\n    },\r\n\r\n    createUser({ commit }, user) {\r\n      console.log(user);\r\n      const API_URL = `${REST_API}/userApi/signup`;\r\n\r\n      axios({\r\n        url: API_URL,\r\n        method: \"POST\",\r\n        data: user,\r\n      })\r\n        .then(() => {\r\n          console.log(user);\r\n          commit;\r\n\r\n          alert(\"회원 가입이 완료 되었습니다.\");\r\n          router.push(\"/login\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n\r\n    searchVideo({ commit }, keyword) {\r\n      const YOUTUBE_KEY = process.env.VUE_APP_YOUTUBE_API_KEY;\r\n      const API_URL = `https://www.googleapis.com/youtube/v3/search`;\r\n\r\n      console.log(keyword);\r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n        params: {\r\n          key: YOUTUBE_KEY,\r\n          part: \"snippet\",\r\n          q: keyword,\r\n          type: \"video\",\r\n          maxResults: 6,\r\n        },\r\n      })\r\n        .then((res) => {\r\n          console.log(res.data.items);\r\n          let items = res.data.items;\r\n          let newItems = items.map((item) => {\r\n            item.snippet.title = _.unescape(item.snippet.title);\r\n            return item;\r\n          });\r\n          console.log(newItems);\r\n          commit(\"SEARCH_VIDEO\", newItems);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n\r\n    checkId({ commit }, id) {\r\n      commit;\r\n      const API_URL = `${REST_API}/userApi/idCheck/${id}`;\r\n\r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n      }).then((res) => {\r\n        if (res.data === \"success\") {\r\n          alert(\"사용 가능한 아이디입니다.\");\r\n        } else {\r\n          alert(\"이미 사용 중인 아이디입니다.\");\r\n        }\r\n      });\r\n    },\r\n\r\n    checkNickname({ commit }, nickname) {\r\n      commit;\r\n      const API_URL = `${REST_API}/userApi/nicknameCheck/${nickname}`;\r\n\r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n      }).then((res) => {\r\n        if (res.data === \"success\") {\r\n          alert(\"사용 가능한 닉네임입니다.\");\r\n        } else {\r\n          alert(\"이미 사용 중인 닉네임입니다\");\r\n        }\r\n      });\r\n    },\r\n\r\n    getVideoList({ commit }, video) {\r\n      console.log(video);\r\n      commit(\"ADD_VIDEO\", video);\r\n    },\r\n\r\n    // makeChallenge({ state, commit }, challenge) {\r\n    //   // 비동기 작업을 수행\r\n    //   const API_URL = `${REST_API}/challengeApi/insertChallenge`;\r\n\r\n    //   axios({\r\n    //     url: API_URL,\r\n    //     method: \"POST\",\r\n    //     data: challenge,\r\n    //   })\r\n    //     .then((res) => {\r\n    //       console.log(res.data);\r\n\r\n    //       commit(\"setchallengeNo\", res.data);\r\n    //     })\r\n    //     .then(() => {\r\n    //       console.log(state.cno);\r\n    //       const API_URL2 = `${REST_API}/challengeApi/insertMission/${state.cno}}`;\r\n    //       console.log(API_URL2);\r\n    //       axios({\r\n    //         url: API_URL2,\r\n    //         method: \"POST\",\r\n    //         data: challenge.missions,\r\n    //       }).then(() => {\r\n    //         // console.log(challenge);\r\n    //         alert(\"챌린지 등록이 완료되었습니다.\");\r\n    //         router.push(\"/detailChallenge\"); //나중에 ${challengeNO}로 보내기\r\n    //       });\r\n    //     })\r\n    //     .catch((err) => {\r\n    //       console.log(err);\r\n    //     });\r\n    //   commit(\"MAKE_CHALLENGE\", challenge);\r\n    //   console.log(challenge);\r\n    // },\r\n    makeChallengePromise({ commit }, challenge) {\r\n      return new Promise((response, reject) => {\r\n        // 비동기 작업 수행\r\n        const API_URL = `${REST_API}/challengeApi/insertChallenge`;\r\n\r\n        axios({\r\n          url: API_URL,\r\n          method: \"POST\",\r\n          data: challenge,\r\n        })\r\n          .then((res) => {\r\n            console.log(res.data);\r\n\r\n            commit(\"setchallengeNo\", res.data);\r\n            response(res.data);\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            reject(err);\r\n          });\r\n      });\r\n    },\r\n    makeMissionPromise({ commit }, payload) {\r\n      commit;\r\n      return new Promise((response, reject) => {\r\n        // 비동기 작업 수행\r\n        const API_URL = `${REST_API}/challengeApi/insertMission/${payload.challengeNo}`;\r\n        let newMissions = payload.missions.map((mission) => {\r\n          return {\r\n            videoTitle: mission.videoTitle,\r\n            challengeNo: payload.challengeNo,\r\n            videoId: mission.videoId,\r\n            videoThumbnail: mission.videoThumbnail.url,\r\n            channelName: mission.channelName,\r\n          };\r\n        });\r\n        console.log(newMissions);\r\n\r\n        axios({\r\n          url: API_URL,\r\n          method: \"POST\",\r\n          data: newMissions,\r\n        })\r\n          .then(() => {\r\n            alert(\"챌린지 등록이 완료되었습니다.\");\r\n            router.push(\"/detailChallenge\"); //나중에 ${challengeNO}로 보내기\r\n          })\r\n          .catch((err) => {\r\n            console.log(err);\r\n            reject(err);\r\n          });\r\n      });\r\n    },\r\n\r\n    deleteVideo({ commit }, index) {\r\n      commit(\"DELETE_MISSION\", index);\r\n    },\r\n\r\n    getChallenges({ commit }) {\r\n      const API_URL = `${REST_API}/challengeApi/allChallenge`;\r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n      }).then((res) => {\r\n        let challenges = res.data;\r\n        commit(\"GET_CHALLENGES\", challenges);\r\n      });\r\n    },\r\n    getDetailChallenge({ commit }, challengeNo) {\r\n      console.log(commit);\r\n      console.log(challengeNo);\r\n      const API_URL = `${REST_API}/challengeApi/detailChallenge/${challengeNo}`;\r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n      })\r\n        .then((res) => {\r\n          let challenge = res.data;\r\n          commit(\"GET_DETAIL_CHALLENGE\", challenge);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n\r\n    goDetail({ commit }) {\r\n      const API_URL = `${REST_API}/challengeApi/detailChallenge`;\r\n      commit;\r\n      console.log(API_URL);\r\n      // console.log(challengeNo);\r\n      // axios({\r\n      //   url: API_URL,\r\n      //   method: \"GET\",\r\n      //   data: challenge,\r\n      // })\r\n      //   .then((res) => {\r\n      //     commit(\"SET_DETAILS\", challenge);\r\n      //   }\r\n      //   .catch((err) => {\r\n      //   console.log(err);\r\n      // },\r\n    },\r\n\r\n    getMyChallenges({ commit }, userNo) {\r\n      const API_URL = `${REST_API}/challengeApi/makeChallengeList/${userNo}`;\r\n\r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n      })\r\n        .then((res) => {\r\n          let mymakechallenges = res.data;\r\n          commit(\"GET_MY_MAKE_CHALLENGE\", mymakechallenges);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    deleteMyMakeChallenge({ state, commit }, challengeNo) {\r\n      console.log(state.loginUser.userNo);\r\n      console.log(challengeNo);\r\n      const API_URL = `${REST_API}/challengeApi/deleteChallenge/${challengeNo}`;\r\n      const API_URL2 = `${REST_API}/challengeApi/makeChallengeList/${state.loginUser.userNo}`;\r\n      axios({\r\n        url: API_URL,\r\n        method: \"DELETE\",\r\n      }).then(() => {\r\n        axios({\r\n          url: API_URL2,\r\n          method: \"GET\",\r\n        }).then((res) => {\r\n          let mymakechallenges = res.data;\r\n          commit(\"GET_MY_MAKE_CHALLENGE\", mymakechallenges);\r\n        });\r\n      });\r\n    },\r\n    inDetailGetMissionList({ commit }, challengeNo) {\r\n      const API_URL = `${REST_API}/challengeApi/detailMission/${challengeNo}`;\r\n\r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n      })\r\n        .then((res) => {\r\n          let indetailGetMissionList = res.data;\r\n          console.log(indetailGetMissionList);\r\n          commit(\"IN_DETAIL_GET_MISSIONLIST\", indetailGetMissionList);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    getMyJoinChallenges({ commit }) {\r\n      const API_URL = `${REST_API}/challengeApi/myjoinChallenge`;\r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n      })\r\n        .then((res) => {\r\n          let myjoinchallenges = res.data;\r\n          commit(\"GET_MY_JOIN_CHALLENGE\", myjoinchallenges);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    // 나중에 다시 확인 필요***********\r\n    joinChallenge({commit}, joinInfo) {\r\n      const API_URL = `${REST_API}/challengeApi/joinChallenge`;\r\n      console.log(joinInfo);\r\n      commit(\"POST_JOIN_INFO\", joinInfo);\r\n      axios({\r\n        url: API_URL,\r\n        method: \"POST\",\r\n        data: joinInfo,\r\n      })\r\n        .then(() => {\r\n          //참여가 되면 그 상세 페이지에서 참여 버튼 바뀌게 해야함.......\r\n          alert(\"챌린지에 등록되었습니다.\");\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    },\r\n    getMissionVideo({ commit }, missionNo) {\r\n      const API_URL =  `${REST_API}/challengeApi/missionVideo/${missionNo}`;\r\n      axios({\r\n        url: API_URL,\r\n        method: \"GET\",\r\n      }).then((res) => {\r\n        let missionVideo = res.data;\r\n        console.log(missionVideo);\r\n        commit(\"GET_VIDEO\", missionVideo);\r\n      })\r\n      \r\n    },\r\n  },\r\n  modules: {},\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}